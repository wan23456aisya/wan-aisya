#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

#define MESSAGE_SIZE 256

int main() {
    int child1_pipe[2];
    int child2_pipe[2];
    int child3_pipe[2];

    if (pipe(child1_pipe) < 0 || pipe(child2_pipe) < 0 || pipe(child3_pipe) < 0) {
        fprintf(stderr, "Failed to create pipes\n");
        return 1;
    }

    pid_t child1, child2, child3;

    child1 = fork();

    if (child1 < 0) {
        fprintf(stderr, "Failed to create child process 1\n");
        return 1;
    } else if (child1 == 0) {
        // Child process 1
        close(child1_pipe[1]); // Close the write end of the pipe

        char message[MESSAGE_SIZE];
        memset(message, 0, sizeof(message));

        // Read the message from the parent
        if (read(child1_pipe[0], message, sizeof(message)) < 0) {
            fprintf(stderr, "Failed to read from pipe in Child 1\n");
            return 1;
        }

        printf("Interrupt message from Child 1: %s\n", message);
        printf("Signal message from Child 1\n");

        close(child1_pipe[0]); // Close the read end of the pipe
        return 0;
    }

    child2 = fork();

    if (child2 < 0) {
        fprintf(stderr, "Failed to create child process 2\n");
        return 1;
    } else if (child2 == 0) {
        // Child process 2
        close(child2_pipe[1]); // Close the write end of the pipe

        char message[MESSAGE_SIZE];
        memset(message, 0, sizeof(message));

        // Read the message from the parent
        if (read(child2_pipe[0], message, sizeof(message)) < 0) {
            fprintf(stderr, "Failed to read from pipe in Child 2\n");
            return 1;
        }

        printf("Interrupt message from Child 2: %s\n", message);
        printf("Signal message from Child 2\n");

        close(child2_pipe[0]); // Close the read end of the pipe
        return 0;
    }

    child3 = fork();

    if (child3 < 0) {
        fprintf(stderr, "Failed to create child process 3\n");
        return 1;
    } else if (child3 == 0) {
        // Child process 3
        close(child3_pipe[1]); // Close the write end of the pipe

        char message[MESSAGE_SIZE];
        memset(message, 0, sizeof(message));

        // Read the message from the parent
        if (read(child3_pipe[0], message, sizeof(message)) < 0) {
            fprintf(stderr, "Failed to read from pipe in Child 3\n");
            return 1;
        }

        printf("Interrupt message from Child 3: %s\n", message);
        printf("Signal message from Child 3\n");

        close(child3_pipe[0]); // Close the read end of the pipe
        return 0;
    }

    // Parent process
    printf("Message from Parent\n");

    close(child1_pipe[0]); // Close the read end of the pipe
    close(child2_pipe[0]); // Close the read end of the pipe
    close(child3_pipe[0]); // Close the read end of the pipe

    // Send messages to child processes
    char parent_message[MESSAGE_SIZE];
    strcpy(parent_message, "Hello Child 1");
    write(child1_pipe[1], parent_message, strlen(parent_message) + 1);

    strcpy(parent_message, "Hello Child 2");
    write(child2_pipe[1], parent_message, strlen(parent_message) + 1);

    strcpy(parent_message, "Hello Child 3");
    write(child3_pipe[1], parent_message, strlen(parent_message) + 1);

    close(child1_pipe[1]); // Close the write end of the pipe
    close(child2_pipe[1]); // Close the write end of the pipe
    close(child3_pipe[1]); // Close the write end of the pipe

    // Wait for all child processes to finish
    wait(NULL);
    wait(NULL);
    wait(NULL);

    return 0;
}
